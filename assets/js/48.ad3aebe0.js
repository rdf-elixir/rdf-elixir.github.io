(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{444:function(t,e,a){"use strict";a.r(e);var s=a(33),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sparql-client-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sparql-client-configuration"}},[t._v("#")]),t._v(" SPARQL client configuration")]),t._v(" "),a("p",[t._v("SPARQL.Client uses "),a("a",{attrs:{href:"https://github.com/teamon/tesla",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tesla"),a("OutboundLink")],1),t._v(", an abstraction over different HTTP client libraries. This allows you to use the HTTP client of your choice, as long as a Tesla adapter exists. Currently httpc, "),a("a",{attrs:{href:"https://github.com/benoitc/hackney",target:"_blank",rel:"noopener noreferrer"}},[t._v("hackney"),a("OutboundLink")],1),t._v(" or "),a("a",{attrs:{href:"https://github.com/cmullaparthi/ibrowse",target:"_blank",rel:"noopener noreferrer"}},[t._v("ibrowse"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/ninenines/gun",target:"_blank",rel:"noopener noreferrer"}},[t._v("gun"),a("OutboundLink")],1),t._v(", "),a("a",{attrs:{href:"https://github.com/elixir-mint/mint",target:"_blank",rel:"noopener noreferrer"}},[t._v("mint"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://github.com/sneako/finch",target:"_blank",rel:"noopener noreferrer"}},[t._v("finch"),a("OutboundLink")],1),t._v(" are supported. See "),a("a",{attrs:{href:"https://github.com/teamon/tesla#adapters",target:"_blank",rel:"noopener noreferrer"}},[t._v("this list"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Without further configuration, the built-in Erlang httpc is used.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("It is strongly advised to use one of the alternatives, since httpc has a "),a("a",{attrs:{href:"https://github.com/teamon/tesla/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Ahttpc+",target:"_blank",rel:"noopener noreferrer"}},[t._v("lot of issues"),a("OutboundLink")],1),t._v(" and will very likely cause troubles sooner or later.")])]),t._v(" "),a("p",[t._v("If you want to use another client library, you'll have to add it to your list of dependencies in "),a("code",[t._v("mix.exs")]),t._v(" and configure Tesla to use it.")]),t._v(" "),a("p",[t._v("So, for hackney you'll have to add "),a("code",[t._v("hackney")]),t._v(" to "),a("code",[t._v("mix.exs")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" deps "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":sparql_client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~> 0.5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":hackney")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~> 1.6"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("and add this line to your "),a("code",[t._v("config.exs")]),t._v(" file (or environment specific configuration):")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("config "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":tesla")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":adapter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Tesla")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Adapter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Hackney")]),t._v("\n")])])]),a("p",[t._v("If you want to pass custom, per-request middleware or adapter options for Tesla (see "),a("code",[t._v("opts")]),t._v(" option of the "),a("code",[t._v("Tesla.request/2")]),t._v(" function) you can do this via the "),a("code",[t._v("request_opts")]),t._v(" option of "),a("code",[t._v("SPARQL.Client.querty/3")]),t._v(" function. For example, the timeout option for the Hackney adapter can be set like this:")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://example.com/sparql"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("request_opts:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("adapter:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("recv_timeout:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30_000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("Unfortunately, there's currently no general way to set the timeout, because of this open Tesla issue "),a("a",{attrs:{href:"https://github.com/teamon/tesla/issues/255",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/teamon/tesla/issues/255"),a("OutboundLink")],1),t._v(". So for now, timeouts must be set in an adapter-specific way like shown in the previous example.")])]),t._v(" "),a("p",[t._v("The SPARQL.Client package also supports configuring the defaults for many of the various options of the query and update functions through the application environment. See the "),a("a",{attrs:{href:"http://hexdocs.pm/sparql_client/SPARQL.Client.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("API documentation"),a("OutboundLink")],1),t._v(" for information on this.")])])}),[],!1,null,null,null);e.default=n.exports}}]);