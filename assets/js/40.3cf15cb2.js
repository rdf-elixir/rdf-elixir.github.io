(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{438:function(a,t,s){"use strict";s.r(t);var e=s(33),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"shapemaps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shapemaps"}},[a._v("#")]),a._v(" ShapeMaps")]),a._v(" "),s("p",[a._v("In order to apply a ShEx schema to your RDF data, you'll have to provide a so called ShapeMap, which is a set of associations of nodes to shapes of the schema to which they must conform to be valid.")]),a._v(" "),s("p",[a._v("You can create a ShapeMap with the  "),s("code",[a._v("ShEx.shape_map/1")]),a._v(" function and provide the respective associations.")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("nodeA"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("The start shape of a schema can referenced with the atom "),s("code",[a._v(":start")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("nodeB"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("When nodes and shape identifiers are given as native Elixir values they will be coerced to respective RDF terms. This also includes terms of an "),s("a",{attrs:{href:"/../rdf-ex/namespaces"}},[a._v("RDF vocabulary namespace")]),a._v(".")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"http://example.com/nodeA"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("EX")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("You can also feed in a ShapeMap in the "),s("a",{attrs:{href:"https://shexspec.github.io/shape-map/",target:"_blank",rel:"noopener noreferrer"}},[a._v("ShapeMap language"),s("OutboundLink")],1),a._v(".")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShapeMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("decode "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v('"\n    '),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("nodeA"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" @ "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("nodeB"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" @ "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("START")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),a._v("\n")])])]),s("p",[a._v("The ShapeMaps above were all fixed ShapeMaps, which specify the nodes directly.\nQuery ShapeMaps allow to provide triple patterns to query the nodes which should conform a certain shape. A triple pattern in a ShEx ShapeMap is a triple with the atom "),s("code",[a._v(":focus")]),a._v(" on subject or object position.")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":focus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("O")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape1")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("S")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":focus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape2")]),a._v(">\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("Additionally, the atom "),s("code",[a._v(":_")]),a._v(" can also be used on subject or object position as a wildcard.")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":focus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape1")]),a._v(">"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":focus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("Shape2")]),a._v(">\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("A query ShapeMap is implicitly converted to a fixed ShapeMap before a validation. You can also do this on your own with the "),s("code",[a._v("ShEx.Shape.to_fixed/2")]),a._v(" function.")]),a._v(" "),s("p",[a._v("ShapeMaps are also used for storing the results of a validation, which will be described in the next section.")]),a._v(" "),s("p",[a._v("You can always determine the type of a ShapeMap with the "),s("code",[a._v("type")]),a._v(" field.")]),a._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[a._v("shape_map "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("ShEx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("shape_map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":focus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[a._v("I")]),a._v("<"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("example"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[a._v(":start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nshape_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# => :query")]),a._v("\n")])])]),s("p",[s("code",[a._v("ShEx.ShapeMap")]),a._v(" implements the "),s("code",[a._v("Enumerable")]),a._v(" protocol over the set of association, so you can use it with all of the "),s("code",[a._v("Enum")]),a._v(" functions.")])])}),[],!1,null,null,null);t.default=n.exports}}]);