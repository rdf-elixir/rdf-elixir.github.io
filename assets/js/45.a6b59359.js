(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{442:function(t,a,s){"use strict";s.r(a);var e=s(33),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"queries-against-rdf-ex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#queries-against-rdf-ex"}},[t._v("#")]),t._v(" Queries against RDF.ex")]),t._v(" "),s("p",[t._v("Let's say we have an RDF.ex graph like this:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("graph "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Turtle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("read_string! "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n  @prefix foaf:  <http://xmlns.com/foaf/0.1/> .\n  \n  _:a  foaf:name   "Johnny Lee Outlaw" .\n  _:a  foaf:mbox   <mailto:jlow@example.com> .\n  _:b  foaf:name   "Peter Goodguy" .\n  _:b  foaf:mbox   <mailto:peter@example.org> .\n  _:c  foaf:mbox   <mailto:carol@example.org> .\n  """')]),t._v("\n")])])]),s("p",[t._v("We can execute the following SPARQL query:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n  PREFIX foaf:   <http://xmlns.com/foaf/0.1/>\n  SELECT ?name ?mbox\n  WHERE\n    { ?x foaf:name ?name .\n      ?x foaf:mbox ?mbox }\n  """')]),t._v("\n")])])]),s("p",[t._v("like this:")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute_query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("This will return a "),s("code",[t._v("SPARQL.Query.Result")]),t._v(" struct which contains the results under the "),s("code",[t._v("results")]),t._v(" field as a list of maps with the bindings of the solutions.")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("results:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mbox"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("I")]),t._v("<mailto"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":peter")]),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("org"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Peter Goodguy"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mbox"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("I")]),t._v("<mailto"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":jlow")]),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ~"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("L")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Johnny Lee Outlaw"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("variables:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mbox"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The list of results for a single variable can be fetched with the "),s("code",[t._v("SPARQL.Query.Result.get/2")]),t._v(" function.")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute_query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":mbox")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("If "),s("code",[t._v("SPARQL.execute_query/2")]),t._v(" is used to execute a "),s("code",[t._v("CONSTRUCT")]),t._v(" query, it will return an "),s("code",[t._v("RDF.Graph")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("iex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute_query graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n...>  PREFIX foaf:   <http://xmlns.com/foaf/0.1/>\n...>  PREFIX schema: <http://schema.org/>\n...>  CONSTRUCT   \n...>    { ?x schema:name ?name ;\n...>         schema:email ?mbox }\n...>  WHERE\n...>    { ?x foaf:name ?name ;\n...>         foaf:mbox ?mbox }\n...>  """')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#RDF.Graph<name: nil")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@prefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("foaf:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xmlns"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foaf")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@prefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rdf:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("org")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1999")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("02")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rdf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("syntax"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ns"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#> .")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@prefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rdfs:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("org")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("01")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("rdf"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("schema"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#> .")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@prefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("schema:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("org"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@prefix")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("xsd:")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http:")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("www"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("w3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("org")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2001")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("XMLSchema")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#> .")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      schema"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mailto"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":peter")]),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("org"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ;\n      schema"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Peter Goodguy"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      schema"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":email")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mailto"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":jlow")]),s("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@example")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ;\n      schema"),s("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":name")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Johnny Lee Outlaw"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("The "),s("code",[t._v("SPARQL.execute_query/2")]),t._v(" function converts a given query string implicitly to a "),s("code",[t._v("SPARQL.Query")]),t._v(" struct. If you intend to execute the query multiple times it's better to do this step on your own with the "),s("code",[t._v("SPARQL.query/1")]),t._v(" function and pass the interpreted query directly to "),s("code",[t._v("SPARQL.execute_query/2")]),t._v(", in order to not parse the query on every execution.")]),t._v(" "),s("div",{staticClass:"language-elixir extra-class"},[s("pre",{pre:!0,attrs:{class:"language-elixir"}},[s("code",[t._v("query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"""\n  PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n  SELECT ?name ?mbox\n  WHERE\n    { ?x foaf:name ?name .\n      ?x foaf:mbox ?mbox }\n  """')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("SPARQL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("execute_query")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);