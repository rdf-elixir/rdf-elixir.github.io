(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{431:function(t,s,a){"use strict";a.r(s);var e=a(33),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"resource-generators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resource-generators"}},[t._v("#")]),t._v(" Resource generators")]),t._v(" "),a("p",[t._v("When you need a configurable and customizable way to generate resource identifiers in your application, you can provide that with the help of "),a("code",[t._v("RDF.Resource.Generator")]),t._v("s, a behaviour for configurable identifier generation strategies.\nThey support the generation of two kinds of identifiers:")]),t._v(" "),a("ol",[a("li",[t._v("parameter-less identifiers which will be random by nature")]),t._v(" "),a("li",[t._v("identifiers which are based on some value, where every attempt to create an identifier for the same value, should be produce the same identifier")])]),t._v(" "),a("p",[t._v("These "),a("code",[t._v("RDF.Resource.Generator")]),t._v(" implementations, however, are not meant to be used directly, but through a wrapper function instead. Let's discuss how they can be used in the context of an example. Let's say we want to implement an algorithm "),a("code",[t._v("foo")]),t._v(" that needs to create some resources with random identifiers along the way, for which we don't want to require the user to provide the ids, but give him some customizability options for the automatic generation of the identifiers of these resources instead.\nSo, we decide to implement this with "),a("code",[t._v("RDF.Resource.Generator")]),t._v("s.\nWe just have to define a function like this:")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmodule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id_config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defp")]),t._v(" id_config "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generator:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("BlankNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("This function simple delegates to "),a("code",[t._v("RDF.Resource.Generator.generate/1")]),t._v(", passing it a configuration specifically introduced for this purpose. We've also provided a default configuration using "),a("code",[t._v("RDF.BlankNode")]),t._v(" (which implements the "),a("code",[t._v("RDF.Resource.Generator")]),t._v(" behaviour) as the default generator.")]),t._v(" "),a("p",[t._v("We can now use our "),a("code",[t._v("id/0")]),t._v(" function in our algorithm to generate ids.")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("iex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b323"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\niex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b355"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("When a user wants to have UUIDs generated instead, he can simply configure it like this (more configurations options are discussed below):")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("config "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generator:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("IRI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("UUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("id/0")]),t._v(" function will now produce the respective UUID identifiers as specified.")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("iex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("I")]),t._v("<urn"),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":uuid")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":4f643db7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("50f1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4838")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("8e7a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("3c6fde092d2a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\niex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("I")]),t._v("<urn"),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":uuid")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":48d07745")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("097c"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("4fe2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8200")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("9a3c9db06875"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("If you want to use a value-based generator instead or additionally, you can define a function which takes the value and passes it to "),a("code",[t._v("RDF.Resource.Generator.generate/2")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmodule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id_config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Resource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id_config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defp")]),t._v(" id_config "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generator:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("BlankNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("p",[t._v("Besides the predefined the generators, users also have a chance to define their own custom generators and let your algorithm use them.")]),t._v(" "),a("h2",{attrs:{id:"predefined-generators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#predefined-generators"}},[t._v("#")]),t._v(" Predefined generators")]),t._v(" "),a("p",[t._v("RDF.ex comes with a few implementations of the "),a("code",[t._v("RDF.Resource.Generator")]),t._v(" behaviour out-of-the-box.")]),t._v(" "),a("h3",{attrs:{id:"blank-nodes-generators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blank-nodes-generators"}},[t._v("#")]),t._v(" Blank nodes generators")]),t._v(" "),a("p",[t._v("We've already seen above that the "),a("code",[t._v("RDF.BlankNode")]),t._v(" module implements the "),a("code",[t._v("RDF.Resource.Generator")]),t._v(" behaviour. It doesn't have any further configuration options and is fine in most scenarios as a default generator. However, it does not support value-based identifier generation.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("RDF.BlankNode.Generator")]),t._v(" is an implementation which supports generation of both kinds of identifiers. It generates auto-incremented blank nodes and remembers the numbers it generated for given values. So, as a stateful generator it requires you to start the "),a("code",[t._v("RDF.BlankNode.Generator")]),t._v(" as a GenServer under a name which you can provide in the configuration.")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defmodule")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Your")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Application")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Application")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token attribute variable"}},[t._v("@impl")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("BlankNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("BlankNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("FooCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    opts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("strategy:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":one_for_one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Your")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Supervisor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Supervisor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start_link")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\n")])])]),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("config "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generator:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("BlankNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("pid:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("FooCounter")]),t._v("\n")])])]),a("p",[t._v("Let's see our generator function in action with this configuration:")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("iex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b0"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\niex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\niex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\niex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n~"),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("B")]),t._v("<b1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("The state of the "),a("code",[t._v("RDF.BlankNode.Generator")]),t._v(" is not persisted!")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("You might be wondering what the "),a("code",[t._v("RDF.BlankNode.Increment")]),t._v(" in the child specification means. The "),a("code",[t._v("RDF.BlankNode.Generator")]),t._v(" is the basis of the implementation of the "),a("code",[t._v("BNODE")]),t._v(" SPARQL function in SPARQL.ex and can be customized with different implementations of the "),a("code",[t._v("RDF.BlankNode.Generator.Algorithm")]),t._v(". "),a("code",[t._v("RDF.BlankNode.Increment")]),t._v(" however is the only implementation of this behaviour for now.")])]),t._v(" "),a("h3",{attrs:{id:"uuid-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uuid-generator"}},[t._v("#")]),t._v(" UUID generator")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("RDF.IRI.UUID.Generator")]),t._v(" allows to generate various kinds of UUID-based URI identifiers.")]),t._v(" "),a("p",[t._v("It supports various configuration options:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(":prefix")]),t._v(": The URI prefix to be prepended to the generated UUID.\nIt can be given also as "),a("code",[t._v("RDF.Vocabulary.Namespace")]),t._v(" module.\nIf the "),a("code",[t._v(":uuid_format")]),t._v(" is set explicitly to something other than "),a("code",[t._v(":urn")]),t._v("\n(which is the default), this is a required parameter.")]),t._v(" "),a("li",[a("code",[t._v(":uuid_version")]),t._v(": The UUID version to be used. Can be any of the integers 1 and 4 for random-based identifiers (4 being the default) and 3 and 5 for value-based identifiers (5 being the default).")]),t._v(" "),a("li",[a("code",[t._v(":uuid_format")]),t._v(": The format of the UUID to be generated. Can be any of the following atoms:\n"),a("ul",[a("li",[a("code",[t._v(":urn")]),t._v(": a standard UUID representation, prefixed with the UUID URN (in this case the "),a("code",[t._v(":prefix")]),t._v(" is not used) (the default when no "),a("code",[t._v(":prefix")]),t._v(" given)")]),t._v(" "),a("li",[a("code",[t._v(":default")]),t._v(": a standard UUID representation, appended to the "),a("code",[t._v(":prefix")]),t._v(" value (the default when a "),a("code",[t._v(":prefix")]),t._v(" is given)")]),t._v(" "),a("li",[a("code",[t._v(":hex")]),t._v(": a standard UUID without the "),a("code",[t._v("-")]),t._v(" (dash) characters, appended to the "),a("code",[t._v(":prefix")]),t._v(" value")])])]),t._v(" "),a("li",[a("code",[t._v(":uuid_namespace")]),t._v(" (only with "),a("code",[t._v(":uuid_version")]),t._v(" 3 and 5, where it is a required parameter)")])]),t._v(" "),a("p",[t._v("When your generator configuration is just for a function producing one of the two kinds of identifiers, you can use these options directly. Otherwise you must provide the identifier-specific configuration under one of the keys "),a("code",[t._v(":random_based")]),t._v(" and "),a("code",[t._v(":value_based")]),t._v(".")]),t._v(" "),a("p",[t._v("Here's a possible configuration for our example from above:")]),t._v(" "),a("div",{staticClass:"language-elixir extra-class"},[a("pre",{pre:!0,attrs:{class:"language-elixir"}},[a("code",[t._v("config "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("generator:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("RDF")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("IRI")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("UUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("Generator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("prefix:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://example.com/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("uuid_format:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":hex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("random_based:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("uuid_version:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value_based:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("uuid_version:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("uuid_namespace:")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token module class-name"}},[t._v("UUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uuid5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token atom symbol"}},[t._v(":url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://your.application.com/foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);